/**
 * generated by Xtext 2.16.0
 */
package org.xtext.riskmanagement.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.model.riskmanagement.Asset;
import org.eclipse.model.riskmanagement.AssetBasedModel;
import org.eclipse.model.riskmanagement.Scenario;
import org.eclipse.model.riskmanagement.ScenarioBasedModel;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.riskmanagement.services.RMGrammarAccess;

@SuppressWarnings("all")
public class RMFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RMGrammarAccess _rMGrammarAccess;
  
  protected void _format(final AssetBasedModel assetBasedModel, @Extension final IFormattableDocument document) {
    document.<Asset>format(assetBasedModel.getAsset());
  }
  
  protected void _format(final ScenarioBasedModel scenarioBasedModel, @Extension final IFormattableDocument document) {
    EList<Scenario> _scenario = scenarioBasedModel.getScenario();
    for (final Scenario scenario : _scenario) {
      document.<Scenario>format(scenario);
    }
  }
  
  public void format(final Object assetBasedModel, final IFormattableDocument document) {
    if (assetBasedModel instanceof XtextResource) {
      _format((XtextResource)assetBasedModel, document);
      return;
    } else if (assetBasedModel instanceof AssetBasedModel) {
      _format((AssetBasedModel)assetBasedModel, document);
      return;
    } else if (assetBasedModel instanceof ScenarioBasedModel) {
      _format((ScenarioBasedModel)assetBasedModel, document);
      return;
    } else if (assetBasedModel instanceof EObject) {
      _format((EObject)assetBasedModel, document);
      return;
    } else if (assetBasedModel == null) {
      _format((Void)null, document);
      return;
    } else if (assetBasedModel != null) {
      _format(assetBasedModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(assetBasedModel, document).toString());
    }
  }
}
